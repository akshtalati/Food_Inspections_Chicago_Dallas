{
	"name": "Fact_Chicago",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Stage_CHICAGO",
						"type": "DatasetReference"
					},
					"name": "stg"
				},
				{
					"dataset": {
						"referenceName": "Dim_Business",
						"type": "DatasetReference"
					},
					"name": "business"
				},
				{
					"dataset": {
						"referenceName": "Dim_Facility",
						"type": "DatasetReference"
					},
					"name": "Facility"
				},
				{
					"dataset": {
						"referenceName": "Dim_Risk",
						"type": "DatasetReference"
					},
					"name": "risk"
				},
				{
					"dataset": {
						"referenceName": "Dim_Location",
						"type": "DatasetReference"
					},
					"name": "location"
				},
				{
					"dataset": {
						"referenceName": "Dim_Violations",
						"type": "DatasetReference"
					},
					"name": "violations"
				},
				{
					"dataset": {
						"referenceName": "Dim_date",
						"type": "DatasetReference"
					},
					"name": "date"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Fact",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "join5"
				},
				{
					"name": "join6"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          INSPECTIONID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          LICENSE as double,",
				"          FACILITY_TYPE as string,",
				"          RISK as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as double,",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_TYPE as string,",
				"          RESULTS as string,",
				"          VIOLATIONS as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          LOCATION as string,",
				"          VIOLATION_CODE as string,",
				"          VIOLATION_DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> stg",
				"source(output(",
				"          BUSINESS_KEY as decimal(10,0),",
				"          AKA_NAME as string,",
				"          DBA_NAME as string,",
				"          LICENSE as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> business",
				"source(output(",
				"          FACILITY_KEY as decimal(10,0),",
				"          FACILITY_TYPE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> Facility",
				"source(output(",
				"          RISK_KEY as decimal(38,0),",
				"          RISK_LEVEL as string,",
				"          INSPECTION_SCORE as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> risk",
				"source(output(",
				"          LOCATION_KEY as decimal(10,0),",
				"          LONGITUDE as double,",
				"          LATITUDE as double,",
				"          LOCATION as string,",
				"          ZIP_CODE as string,",
				"          STATE as string,",
				"          CITY as string,",
				"          ADDRESS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> location",
				"source(output(",
				"          VIOLATION_KEY as decimal(38,0),",
				"          VIOLATION_DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> violations",
				"source(output(",
				"          DATE_KEY as decimal(38,0),",
				"          INSPECTION_DATE as date,",
				"          YEAR as string,",
				"          MONTH as string,",
				"          WEEKDAY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> date",
				"stg, business join(stg@LICENSE == business@LICENSE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, Facility join(stg@FACILITY_TYPE == Facility@FACILITY_TYPE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, risk join(RISK == RISK_LEVEL,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3, location join(stg@ADDRESS == location@ADDRESS,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4, violations join(VIOLATIONS == violations@VIOLATION_DESCRIPTION,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"join5, date join(stg@INSPECTION_DATE == date@INSPECTION_DATE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join6",
				"select2 keyGenerate(output(Inspection_Event_Key as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(City = \"Chicago\") ~> derivedColumn1",
				"join6 select(mapColumn(",
				"          INSPECTIONID,",
				"          DBA_NAME = stg@DBA_NAME,",
				"          AKA_NAME = stg@AKA_NAME,",
				"          LICENSE = stg@LICENSE,",
				"          FACILITY_TYPE = stg@FACILITY_TYPE,",
				"          RISK,",
				"          ADDRESS = stg@ADDRESS,",
				"          CITY = stg@CITY,",
				"          STATE = stg@STATE,",
				"          ZIP,",
				"          INSPECTION_DATE = stg@INSPECTION_DATE,",
				"          INSPECTION_TYPE,",
				"          RESULTS,",
				"          VIOLATIONS,",
				"          LATITUDE = stg@LATITUDE,",
				"          LONGITUDE = stg@LONGITUDE,",
				"          LOCATION = stg@LOCATION,",
				"          VIOLATION_CODE,",
				"          VIOLATION_DESCRIPTION = stg@VIOLATION_DESCRIPTION,",
				"          BUSINESS_KEY,",
				"          AKA_NAME = business@AKA_NAME,",
				"          DBA_NAME = business@DBA_NAME,",
				"          LICENSE = business@LICENSE,",
				"          FACILITY_KEY,",
				"          FACILITY_TYPE = Facility@FACILITY_TYPE,",
				"          RISK_KEY,",
				"          RISK_LEVEL,",
				"          INSPECTION_SCORE,",
				"          LOCATION_KEY,",
				"          LONGITUDE = location@LONGITUDE,",
				"          LATITUDE = location@LATITUDE,",
				"          LOCATION = location@LOCATION,",
				"          ZIP_CODE,",
				"          STATE = location@STATE,",
				"          CITY = location@CITY,",
				"          ADDRESS = location@ADDRESS,",
				"          VIOLATION_KEY,",
				"          VIOLATION_DESCRIPTION = violations@VIOLATION_DESCRIPTION,",
				"          DATE_KEY,",
				"          INSPECTION_DATE = date@INSPECTION_DATE,",
				"          YEAR,",
				"          MONTH,",
				"          WEEKDAY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 aggregate(groupBy(VIOLATION_KEY,",
				"          FACILITY_KEY,",
				"          DATE_KEY,",
				"          RISK_KEY,",
				"          LOCATION_KEY,",
				"          BUSINESS_KEY,",
				"          INSPECTION_TYPE,",
				"          RESULTS),",
				"     INSPECTIONID = first(INSPECTIONID),",
				"          LICENSE = first(LICENSE),",
				"          VIOLATIONS = first(VIOLATIONS),",
				"          INSPECTION_DATE = first(INSPECTION_DATE)) ~> aggregate1",
				"aggregate1 select(mapColumn(",
				"          VIOLATION_KEY,",
				"          FACILITY_KEY,",
				"          DATE_KEY,",
				"          RISK_KEY,",
				"          LOCATION_KEY,",
				"          BUSINESS_KEY,",
				"          INSPECTION_TYPE,",
				"          RESULTS = aggregate1@RESULTS,",
				"          INSPECTIONID,",
				"          LICENSE,",
				"          VIOLATIONS,",
				"          INSPECTION_DATE,",
				"          RESULTS = aggregate1@RESULTS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          INSPECTION_EVENT_KEY as decimal(38,0),",
				"          FACILITY_KEY as decimal(38,0),",
				"          BUSINESS_KEY as decimal(38,0),",
				"          LOCATION_KEY as decimal(38,0),",
				"          VIOLATION_KEY as decimal(38,0),",
				"          DATE_KEY as decimal(38,0),",
				"          RISK_KEY as decimal(38,0),",
				"          INSPECTION_TYPE as string,",
				"          RESULTS as string,",
				"          INSPECTION_ID as decimal(38,0),",
				"          CITY_NAME as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          INSPECTION_EVENT_KEY = Inspection_Event_Key,",
				"          FACILITY_KEY,",
				"          BUSINESS_KEY,",
				"          LOCATION_KEY,",
				"          VIOLATION_KEY,",
				"          DATE_KEY,",
				"          RISK_KEY,",
				"          INSPECTION_TYPE,",
				"          INSPECTION_ID = INSPECTIONID,",
				"          RESULTS = VIOLATION_KEY,",
				"          CITY_NAME = City",
				"     )) ~> sink1"
			]
		}
	}
}